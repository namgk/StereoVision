import numpy as np
from argparse import ArgumentParser

class CalibrationFile:
	def __init__(self, calibrated_folder, cam_id):
		self.cam_mat = np.load(calibrated_folder + '/cam_mats_' + cam_id + '.npy')
		self.dist_coef = np.load(calibrated_folder + '/dist_coefs_' + cam_id + '.npy')
		self.rect_mat = np.load(calibrated_folder + '/rect_trans_' + cam_id + '.npy')
		self.proj_mat = np.load(calibrated_folder + '/proj_mats_' + cam_id + '.npy')

		self.distortion_model = 'plumb_bob'
		self.camera_name = cam_id
		self.image_width = 640
		self.image_height = 480

	def toString(self):
		output = ''
		output += 'image_width: %d\n' % self.image_width
		output += 'image_height: %d\n' % self.image_height
		output += 'camera_name: %s\n' % self.camera_name
		output += 'camera_matrix:\n'
		output += '  rows: %d\n' % self.cam_mat.shape[0]
		output += '  cols: %d\n' % self.cam_mat.shape[1]
		output += '  data: %s\n' % self.cam_mat.flatten().tolist()
		output += 'distortion_model: %s\n' % self.distortion_model
		output += 'distortion_coefficients:\n'
		output += '  rows: %d\n' % self.dist_coef.shape[0]
		output += '  cols: %d\n' % self.dist_coef.shape[1]
		output += '  data: %s\n' % self.dist_coef.flatten().tolist()
		output += 'rectification_matrix:\n'
		output += '  rows: %d\n' % self.rect_mat.shape[0]
		output += '  cols: %d\n' % self.rect_mat.shape[1]
		output += '  data: %s\n' % self.rect_mat.flatten().tolist()
		output += 'projection_matrix:\n'
		output += '  rows: %d\n' % self.proj_mat.shape[0]
		output += '  cols: %d\n' % self.proj_mat.shape[1]
		output += '  data: %s\n' % self.proj_mat.flatten().tolist()
		return output


def main():
    """
    Read all images in input folder and produce camera calibration files.

    First, parse arguments provided by user. Then scan input folder for input
    files. Harvest chessboard points from each image in folder, then use them
    to calibrate the stereo pair. Report average error to user and export
    calibration files to output folder.
    """
    parser = ArgumentParser(description="Turn calibration data generated by StereoVision into ROS yaml file")
    parser.add_argument("calibrated_folder", help="Calibrated folder generated by StereoVision")
    parser.add_argument("cam_id", help="Camera Id to generate")

    args = parser.parse_args()

    calibrationFile = CalibrationFile(args.calibrated_folder, args.cam_id)
    with open(args.cam_id + '.yaml', 'w') as file:
    	file.write(calibrationFile.toString())


if __name__ == "__main__":
    main()